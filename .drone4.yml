kind: pipeline
type: kubernetes
name: terraform-deploy

environment:
  AWS_ACCESS_KEY_ID:
    from_secret: aws_access_key_id
  AWS_SECRET_ACCESS_KEY:
    from_secret: aws_secret_access_key

steps:
  - name: init
    image: custom-terraform-awscli-image
    commands:
      - terraform init

  - name: plan #test
    image: custom-terraform-awscli-image
    commands: 
      - |
        aws_role_cred=$(aws sts assume-role --role-arn "arn:aws:iam::833904932690:role/DroneCI" --role-session-name drone-ci)
        export AWS_ACCESS_KEY_ID=$(echo $aws_role_cred | jq -r .Credentials.AccessKeyId)
        export AWS_SECRET_ACCESS_KEY=$(echo $aws_role_cred | jq -r .Credentials.SecretAccessKey)
        export AWS_SESSION_TOKEN=$(echo $aws_role_cred | jq -r .Credentials.SessionToken)
        terraform plan -var="AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" -var="AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY"

  - name: apply
    image: custom-terraform-awscli-image
    commands: 
      - |
        aws_role_cred=$(aws sts assume-role --role-arn "arn:aws:iam::833904932690:role/DroneCI" --role-session-name drone-ci)
        export AWS_ACCESS_KEY_ID=$(echo $aws_role_cred | jq -r .Credentials.AccessKeyId)
        export AWS_SECRET_ACCESS_KEY=$(echo $aws_role_cred | jq -r .Credentials.SecretAccessKey)
        export AWS_SESSION_TOKEN=$(echo $aws_role_cred | jq -r .Credentials.SessionToken)
        terraform apply -auto-approve -var="AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" -var="AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY"
    when:
      event:
        - push
        - pull_request
